{"version":3,"sources":["Components/InputArea/InputArea.js","Components/Chart/Chart.js","Util/inputs.js","Lib/EventsHandler.js","Lib/randomRGB.js","App.js","serviceWorker.js","index.js"],"names":["InputArea","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","resize","e","newHeight","pageY","inputcontainer","current","getBoundingClientRect","top","setState","inputHeight","stopResize","window","removeEventListener","console","log","React","createRef","resizer","state","_this2","addEventListener","_this$props","values","onChange","react_default","a","createElement","className","ref","lib_default","mode","width","height","theme","showPrintMargin","wrapEnabled","value","fontSize","name","editorProps","$blockScrolling","style","fontFamily","minHeight","Component","Chart","getChartData","canvas","data","margin","maxHeight","maxWidth","datasets","forEach","set","i","borderWidth","fill","lineTension","textarea","es","options","maintainAspectRatio","title","display","legend","position","scales","xAxes","type","time","unit","displayFormats","minute","ticks","source","beginAtZero","defaultInputs","EventHandler","span","begin","end","group","select","streamStarted","map","Map","entry","prop","hasOwnProperty","Error","concat","JSON","stringify","join","label","randColor","randomValue","Math","floor","random","r","g","b","randomRGB","dataset","backgroundColor","borderColor","push","entries","trim","split","jsonArr","length","formattedEntry","replace","parse","timestamp","selectGroup","element","id","axes","x","y","has","get","err","alert","Header","Layout","Footer","App","handleInputs","EventsParser","EventsHandler","inputs","processData","getDatasets","onClick","event","inputarea","layout","background","color","Components_InputArea_InputArea","Components_Chart_Chart","es_button","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca5b129b.chunk.js","sourcesContent":["\r\n\r\n/*This is the component that renders the input field\r\n*  wrapped in a resizable div\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport AceEditor from 'react-ace';\r\nimport './InputArea.css';\r\n\r\nimport 'brace/mode/java';\r\nimport 'brace/theme/solarized_dark';\r\n\r\nclass InputArea extends Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    /*Creating Refs for the input field and the resizer*/\r\n    this.inputcontainer = React.createRef();\r\n    this.resizer = React.createRef();\r\n\r\n    this.state = {\r\n      inputHeight: '100%'\r\n    }\r\n\r\n  }\r\n\r\n  /*Gets the new height based on the mouse Y coordinates and sets the new height in the State*/\r\n  resize = (e) => {\r\n\r\n    const newHeight = e.pageY - (this.inputcontainer.current.getBoundingClientRect().top) + 'px';\r\n\r\n    this.setState({inputHeight: newHeight });\r\n\r\n  }\r\n\r\n  /*Stops resizing*/\r\n  stopResize = (e) =>{\r\n    window.removeEventListener('mousemove', this.resize);\r\n    console.log('removed');\r\n  }\r\n\r\n/*Adding the event listeners for the resing process*/\r\ncomponentDidMount(){\r\n\r\n  this.resizer.current.addEventListener('mousedown', (e)=>{\r\n    window.addEventListener('mousemove',this.resize);\r\n    window.addEventListener('mouseup',this.stopResize);\r\n  });\r\n\r\n}\r\n\r\nrender(){\r\n  const { values, onChange} = this.props;\r\n  return(\r\n    <div className=\"inputcontainer\" ref={this.inputcontainer}>\r\n    <AceEditor\r\n      mode=\"java\"\r\n      width=\"100%\"\r\n      height={this.state.inputHeight}\r\n      theme=\"solarized_dark\"\r\n      showPrintMargin = {false}\r\n\t\t\twrapEnabled     = {true}\r\n      value = {values}\r\n      fontSize=\"16px\"\r\n      onChange={onChange}\r\n      name=\"inputarea\"\r\n      editorProps={{$blockScrolling: true,}}\r\n      style={{fontFamily: \"'Source Code Pro', monospace\", minHeight: \"100px\"}}\r\n    />\r\n    <div className='resizer' ref={this.resizer}></div>\r\n    </div>\r\n\r\n  )\r\n\r\n}\r\n}\r\n\r\nexport default InputArea;\r\n","    import React, { Component } from 'react';\r\n    import { Line } from 'react-chartjs-2';\r\n    import './Chartjs.css';\r\n\r\n    class Chart extends Component {\r\n\r\n      constructor(props){\r\n        super(props);\r\n\r\n        this.textarea = React.createRef();\r\n\r\n      }\r\n\r\n      getChartData = canvas => {\r\n\r\n        const data = this.props.data;\r\n        canvas.style.margin = 'auto';\r\n        canvas.style.maxHeight='400px';\r\n        canvas.style.maxWidth='90%';\r\n\r\n        data.datasets.forEach((set,i) => {\r\n          set.borderWidth = 2;\r\n          set.fill = false;\r\n          set.lineTension = 0;\r\n        });\r\n\r\n        return data;\r\n\r\n      }\r\n\r\n      componentDidMount(){\r\n\r\n\r\n      }\r\n\r\n\r\n      render(){\r\n\r\n        return(\r\n          <div className='chartcontainer'>\r\n          <Line\r\n                    options={{\r\n                      maintainAspectRatio: false,\r\n                      title: {\r\n                        display: false\r\n                      },\r\n                      legend: {position: 'right'},\r\n\r\n                      scales:     {\r\n                          xAxes: [{\r\n                              type:'time',\r\n                              time: {\r\n                                unit: 'minute',\r\n                                displayFormats:{\r\n                      \t\t\t\t\tminute: 'HH:mm:ss'\r\n                      \t\t\t\t}\r\n                              },\r\n                              ticks: {\r\n                                source: \"data\", beginAtZero: true,\r\n                              }\r\n                          }]\r\n                        }\r\n\r\n                    }}\r\n                    data={this.getChartData}\r\n                  />\r\n                  </div>\r\n                )\r\n      }\r\n    }\r\n\r\n    export default Chart;\r\n","export const defaultInputs =\r\n\r\n`{type: 'start', timestamp: 1519862400000, select: ['min_response_time', 'max_response_time'], group: ['os', 'browser']}\r\n{type: 'span', timestamp: 1519862400000, begin: 1519862400000, end: 1519862460000}\r\n{type: 'data', timestamp: 1519862400000, os: 'linux', browser: 'chrome', min_response_time: 0.1, max_response_time: 1.3}\r\n{type: 'data', timestamp: 1519862400000, os: 'mac', browser: 'chrome', min_response_time: 0.2, max_response_time: 1.2}\r\n{type: 'data', timestamp: 1519862400000, os: 'mac', browser: 'firefox', min_response_time: 0.3, max_response_time: 1.2}\r\n{type: 'data', timestamp: 1519862400000, os: 'linux', browser: 'firefox', min_response_time: 0.1, max_response_time: 1.0}\r\n{type: 'data', timestamp: 1519862460000, os: 'linux', browser: 'chrome', min_response_time: 0.2, max_response_time: 0.9}\r\n{type: 'data', timestamp: 1519862460000, os: 'mac', browser: 'chrome', min_response_time: 0.1, max_response_time: 1.0}\r\n{type: 'data', timestamp: 1519862460000, os: 'mac', browser: 'firefox', min_response_time: 0.2, max_response_time: 1.1}\r\n{type: 'data', timestamp: 1519862460000, os: 'linux', browser: 'firefox', min_response_time: 0.3, max_response_time: 1.4}\r\n{type: 'stop', timestamp: 1519862400000}`;\r\n","/*This class is responsible for handling events, which are\r\na set of key and values*/\r\n\r\nimport { randomRGB } from './randomRGB.js';\r\n\r\nclass EventHandler {\r\n\r\nconstructor(data){\r\n\r\n\tthis.data = data;\r\n\tthis.datasets = [];\r\n\tthis.span = {\r\n\t\tbegin: '',\r\n\t\tend: ''\r\n\t};\r\n\tthis.group = '';\r\n\tthis.select='';\r\n\tthis.streamStarted = false;\r\n\tthis.map = new Map();\r\n\r\n}\r\n\r\n/*Selects the properties of the group in the start*/\r\nselectGroup(props, entry){\r\n\r\n\tconst propsArr = props.map(prop=>{\r\n\r\n\t\tif(entry.hasOwnProperty(prop)){\r\n\t\t\treturn entry[prop];\r\n\t\t}else{\r\n\t\t\tthrow Error(`No property ${prop} found on the following event: ${JSON.stringify(entry)}`);\r\n\t\t}\r\n\t});\r\n\r\n\treturn propsArr.join(' ');\r\n\r\n\r\n}\r\n\r\n/*Sets some parameters for each dataset and returs them*/\r\ngetDatasets(){\r\n\r\n\tthis.map.forEach((data,label)=>{\r\n\r\n\t\tconst randColor = randomRGB();\r\n\r\n\t\tlet dataset = {\r\n\r\n\t\t\tlabel: label,\r\n\t\t\tbackgroundColor: randColor,\r\n\t\t\tborderColor: randColor,\r\n\t\t\tdata: data\r\n\r\n\t\t};\r\n\r\n\t\tthis.datasets.push(dataset);\r\n\r\n\r\n\t});\r\n\r\nreturn this.datasets;\r\n}\r\n\r\n/*This is the function that handles all the inputs, converting the JSON input into\r\na valid JSON, and starts the process of analyzing the events by looping through\r\nan array of events*/\r\n\r\n\r\nprocessData(){\r\n\r\n\tlet entries = this.data.trim().split('\\n');\r\n\r\n\tlet jsonArr = [];\r\n\r\n\r\n\r\ntry{\r\n\r\n\tentries.forEach(entry=>{\r\n\t if(entry.length){\r\n\t\t let formattedEntry = entry.replace(/(['\"])?((([0-9]+)?[a-zA-Z_]+([0-9]+)?)+(\\2?)|(['\"][0-9]+))(['\"])?/g,'\"$2\"');\r\n\t\t jsonArr.push(JSON.parse(formattedEntry));\r\n\t }\r\n }\r\n );\r\n\r\njsonArr.forEach(entry=>{\r\n\r\n\tconst { type, select, group } = entry;\r\n\r\n\tswitch(type){\r\n\t\tcase 'start':\r\n\t\tif(!group.length) throw Error(\"There should be a group in the start event.\");\r\n\t\tif(this.streamStarted === false){\r\n\t\t\t\tthis.streamStarted = true;\r\n\t\t\t\tthis.group = group;\r\n\t\t\t\tthis.select = select;\r\n\t\t}else{\r\n\t\t\tthrow Error(\"There's already an unfinished stream in progress. \")\r\n\t\t}\r\n\r\n\t\tbreak;\r\n\r\n\t\tcase 'span':\r\n\t\tthis.span =  {\r\n\t\t\tbegin: entry.begin,\r\n\t\t\tend: entry.end\r\n\t\t};\r\n\r\n\t\tif(this.span.begin > this.span.end) throw Error(\"Invalid span interval. End value must be greater than begin value\");\r\n\r\n\t\tbreak;\r\n\r\n\t\tcase 'data':\r\n\r\n\t\tif(!this.streamStarted) throw Error(\"No Stream in progress.\");\r\n\r\n\t\tif(entry.timestamp >= this.span.begin && entry.timestamp <= this.span.end ){\r\n\r\n\t\t\tconst group = this.selectGroup(this.group, entry);\r\n\r\n\t\t\tthis.select.forEach(element=>{\r\n\r\n\t\t\t\tif(entry.hasOwnProperty(element)){\r\n\r\n\t\t\t\t\tconst id = `${group} ${element.replace(/_/g,\" \")}`;\r\n\t\t\t\t\tconst axes = {\r\n\r\n\t\t\t\t\t\tx: (entry.timestamp-this.span.begin)-75600000,\r\n\t\t\t\t\t\ty: entry[element]\r\n\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tif(this.map.has(id)){\r\n\r\n\t\t\t\t\t\tthis.map\r\n\t\t\t\t\t\t\t\t.get(id)\r\n\t\t\t\t\t\t\t\t.push(axes);\r\n\r\n\t\t\t\t\t}else{\r\n\r\n\t\t\t\t\t\tthis.map\r\n\t\t\t\t\t\t\t\t.set(id,\r\n\t\t\t\t\t\t\t\t\t\t\t[axes]\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\tcase 'stop':\r\n\t\tif(this.streamStarted === true){\r\n\t\t\t\tthis.streamStarted = false;\r\n\t\t}else{\r\n\t\t\tthrow Error(\"No stream in progress to be stopped. \")\r\n\t\t}\r\n\t\tbreak;\r\n\r\n\t\t default:\r\n\t\t \tthrow Error(`Invalid event ${JSON.stringify(entry)}.`);\r\n\t\t break;\r\n\t}\r\n\r\n\r\n\t});\r\n\r\n}catch(err){\r\n\r\n\talert(err);\r\n}\r\n\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default EventHandler;\r\n","export const randomRGB = () => {\r\n\r\n\tconst randomValue = () => {\r\n\r\n\t\treturn Math.floor(Math.random()*256);\t\r\n\t}\r\n\r\n\t\tlet r= randomValue();\r\n\t\tlet g= randomValue();\r\n\t\tlet b= randomValue();\r\n\r\n\treturn `rgb(${r},${g},${b})`;\r\n}","  import React, { Component } from 'react';\n  import { Layout, Button } from 'antd';\n  import InputArea from './Components/InputArea/InputArea.js';\n  import Chart from './Components/Chart/Chart.js';\n  import { defaultInputs } from './Util/inputs.js';\n  import EventsHandler from './Lib/EventsHandler.js';\n  import \"antd/dist/antd.css\";\n  import './App.css';\n\n  const {\n          Header, Footer\n        } = Layout;\n\n  class App extends Component {\n\n\n    constructor(props){\n      super(props);\n\n      this.inputarea = React.createRef();\n      this.state = {\n        data: {\n\n          datasets:[]\n        },\n        inputs: defaultInputs\n      }\n    }\n\n      componentDidMount(){\n        this.handleInputs(this.inputs);\n\n      }\n\n      handleInputs = () => {\n\n        let EventsParser = new EventsHandler(this.state.inputs);\n\n        EventsParser.processData();\n\n        let datasets = EventsParser.getDatasets();\n\n        this.setState(\n        {\n\n          data: {\n\n                datasets: datasets\n\n                }\n        });\n\n      }\n\n\n\n      onClick = event => {\n\n        this.handleInputs();\n\n      }\n\n      onChange = (value, event) => {\n\n        this.setState({\n          inputs: value\n        });\n      }\n\n    render() {\n\n      return (\n\n          <Layout>\n              <Header style={{background: 'LightGray', color: '#444', fontSize: '28px'}}>Alex's Challenge</Header>\n              <InputArea values={this.state.inputs} onChange={this.onChange}/>\n              <Chart className='chart' data={this.state.data}/>\n              <Footer style={{background: 'LightGray'}}>\n                    <Button type=\"primary\" onClick={this.onClick}>GENERATE CHART</Button>\n              </Footer>\n          </Layout>\n\n      );\n    }\n  }\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}